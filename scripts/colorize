#!/usr/bin/env python3
import argparse
import sys
from argparse import RawTextHelpFormatter

description = r"""
Process text with percent-escaped ANSI color codes. The text
can either come from STDIN or from an input file. The colors
are escaped as follows:

    %x = \x1b[0m   reset
    %k = \x1b[90m  blacK
    %r = \x1b[91m  Red
    %g = \x1b[92m  Green
    %y = \x1b[93m  Yellow
    %b = \x1b[94m  Blue
    %m = \x1b[95m  Magenta
    %c = \x1b[96m  Cyan
    %w = \x1b[97m  White
    %% = %         Percent Literal
"""
parser = argparse.ArgumentParser(description=description, formatter_class=RawTextHelpFormatter)
parser.add_argument("file", nargs="?", help="file to read from")
parser.add_argument("-e", "--esc", help="the escape character to use, defaults to %%", default="%")
args = parser.parse_args()

def fatal(string):
    print(f"{PROG}: {string}", file=sys.stderr)
    print(f"Try '{PROG} --help' for more information", file=sys.stderr)
    sys.exit(1)

PROG = parser.prog
ESC = args.esc

if len(ESC) != 1:
    fatal("escape character must be exactly one character long")

escapes = {
    "x": '\x1b[0m'  # reset
    "k": '\x1b[90m' # blacK
    "r": "\x1b[91m" # Red
    "g": '\x1b[92m' # Green
    "y": '\x1b[93m' # Yellow
    "b": '\x1b[94m' # Blue
    "m": '\x1b[95m' # Magenta
    "c": '\x1b[96m' # Cyan
    "w": '\x1b[97m' # White
    ESC: ESC
}

if args.file:
    with open(args.file, "r") as file:
        data = file.read()
else:
    data = sys.stdin.read()

out = []
length = len(data)
i = 0
while i < length:
    c = data[i]
    if c == ESC:
        if i == length-1:
            fatal(f"last character cannot be start of specifier")

        specifier = data[i+1]
        i += 1
        if specifier not in escapes:
            fatal(f"invalid specifier {ESC}{specifier}")
        out.append(escapes[specifier])
    else:
        out.append(c)
    i += 1

print("".join(out), end="")
